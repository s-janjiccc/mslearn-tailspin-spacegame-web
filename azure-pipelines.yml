trigger:
- '*'
#- main

pool:
  name: 'Default'
    
variables:
    buildConfiguration: 'Release'
    wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
    dotnetSdkVersion: '6.x'

steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersion)'

    - script: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install 16
        nvm use 16
        export PATH="$NVM_DIR/versions/node/v16.*/bin:$PATH"
        node -v
        npm -v
        rm -rf node_modules package-lock.json
        npm cache clean --force
        export PYTHON=/opt/homebrew/bin/python3.11
        npm install
      displayName: 'Use Node.js 16, verify version, try to install npm packages, compile sass assets'

    # list current directory and node_modules/.bin directory
    - script: |
        ls
        ls -la ./node_modules/.bin
      displayName: 'List current and node_modules/.bin directory'

    # ensure node 16 to use build node-sass and run gulp
    - script: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use 16
        ./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)
        npx gulp
      displayName: 'Compile SASS assets'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info into file'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build .NET project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--no-restore --configuration $(buildConfiguration)' # buildConfiguration is defined above in variables

    # publish the project as zip
    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET project'
      inputs:
        command: 'publish'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    # publish the artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts: drop'
      condition: succeeded()